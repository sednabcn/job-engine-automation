name: Ultimate Job Search Engine - Complete Automation
# ===============================================================
# üöÄ UNIFIED REVERSE JOB ENGINE ‚Äî USAGE & CONTRIBUTION GUIDE
# ===============================================================
#
# üß≠ USAGE GUIDE
# ---------------------------------------------------------------
# 1Ô∏è‚É£ INITIAL SETUP
#    ‚Ä¢ Place your CV file here:
#         data/my_cv.txt (or .pdf, .docx)
#    ‚Ä¢ Place your target job description here:
#         data/target_job.txt (or .pdf, .docx)
#
# 2Ô∏è‚É£ FILE FORMAT
#    ‚Ä¢ The engine supports multiple formats:
#         ‚úÖ .txt  - Plain text files
#         ‚úÖ .pdf  - PDF documents
#         ‚úÖ .docx - Microsoft Word documents
#
# 3Ô∏è‚É£ WORKFLOW EXECUTION
#    ‚Ä¢ Trigger manually from "Actions" tab
#    ‚Ä¢ Runs automatically at 9 AM and 9 PM daily
#
# 4Ô∏è‚É£ OUTPUT
#    ‚Ä¢ All data saved in: job_search_data/
#    ‚Ä¢ Reports available as artifacts
#
# ===============================================================

on:
  schedule:
    - cron: '0 9,21 * * *'  # 9 AM and 9 PM daily
  
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        default: 'daily_report'
        options:
          - daily_report
          - full_analysis
          - batch_analysis
          - start_sprint
          - log_daily
          - end_sprint
          - quality_check
          - generate_materials
      
      # CV and Job files
      cv_path:
        description: 'Path to CV file (.txt, .pdf, .docx)'
        required: false
        default: 'data/my_cv.pdf'
      
      job_path:
        description: 'Path to job description (.txt, .pdf, .docx)'
        required: false
        default: 'data/target_job.pdf'
      
      job_files:
        description: 'Comma-separated job files for batch analysis'
        required: false
        default: ''
      
      job_title:
        description: 'Job title (optional)'
        required: false
        default: 'Target Role'
      
      company_name:
        description: 'Company name (optional)'
        required: false
        default: 'Target Company'
      
      # Sprint tracking
      hours:
        description: 'Hours spent today (for log_daily)'
        required: false
        default: '3'
      
      concepts:
        description: 'Concepts learned (comma-separated, for log_daily)'
        required: false
        default: ''
      
      notes:
        description: 'Daily notes (for log_daily)'
        required: false
        default: ''
      
      project_url:
        description: 'Project URL (for end_sprint)'
        required: false
        default: ''
      
      test_scores:
        description: 'Test scores JSON: {"skill": score} (for end_sprint)'
        required: false
        default: '{}'
      
      # Options
      generate_materials:
        description: 'Generate application materials?'
        required: false
        type: boolean
        default: true
      
      generate_comparison:
        description: 'Generate comparison report? (batch_analysis)'
        required: false
        type: boolean
        default: true
      
      send_email:
        description: 'Send email notification?'
        required: false
        type: boolean
        default: false
      
      email_to:
        description: 'Email address for notifications'
        required: false
        default: ''
  
  push:
    paths:
      - 'data/**.pdf'
      - 'data/**.docx'
      - 'data/**.txt'

env:
  PYTHON_VERSION: '3.11'
  PYTHONPATH: 'src'
  DATA_DIR: 'job_search_data'
  STATE_ARTIFACT: 'job-search-state-v1'
  TARGET_SCORE: 90

jobs:
  ultimate_job_search:
    name: Ultimate Job Search Engine
    runs-on: ubuntu-latest
    
    steps:
      # =====================================================================
      # SETUP & INITIALIZATION
      # =====================================================================
      
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: üì¶ Install dependencies
        run: |
          pip install --upgrade pip
          pip install python-dateutil PyPDF2 python-docx
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          echo "‚úÖ Dependencies installed"
      
      - name: üìÇ Ensure directories exist
        run: |
          mkdir -p ${{ env.DATA_DIR }}
          mkdir -p data
          mkdir -p src
          mkdir -p output
          mkdir -p batch_results
          
          if [ ! -f "src/python_advanced_job_engine.py" ]; then
            echo "‚ùå Error: src/python_advanced_job_engine.py not found"
            exit 1
          fi
          
          echo "‚úÖ Directories created and verified"
      
      # ========================================
      # RESTORE STATE FROM PREVIOUS RUNS
      # ========================================
      
      - name: üì• Restore State from Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.STATE_ARTIFACT }}
          path: ${{ env.DATA_DIR }}
        continue-on-error: true
      
      - name: üîç Verify State Restoration
        id: verify_state
        run: |
          if [ -f "${{ env.DATA_DIR }}/workflow_state.json" ]; then
            echo "‚úÖ State restored from previous run"
            echo "state_restored=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è  Starting fresh - no previous state"
            echo "state_restored=false" >> $GITHUB_OUTPUT
          fi
      
      # =====================================================================
      # VALIDATE INPUTS
      # =====================================================================
      
      - name: ‚úÖ Validate Inputs
        id: validate
        run: |
          ACTION="${{ github.event.inputs.action }}"
          CV_PATH="${{ github.event.inputs.cv_path }}"
          JOB_PATH="${{ github.event.inputs.job_path }}"
          JOB_FILES="${{ github.event.inputs.job_files }}"
          
          echo "üîç Validating inputs for action: $ACTION"
          
          # Validate based on action
          case "$ACTION" in
            "full_analysis")
              if [ ! -f "$CV_PATH" ]; then
                echo "‚ùå CV file not found: $CV_PATH"
                exit 1
              fi
              if [ ! -f "$JOB_PATH" ]; then
                echo "‚ùå Job file not found: $JOB_PATH"
                exit 1
              fi
              echo "‚úÖ Files validated"
              ;;
            
            "batch_analysis")
              if [ ! -f "$CV_PATH" ]; then
                echo "‚ùå CV file not found: $CV_PATH"
                exit 1
              fi
              if [ -z "$JOB_FILES" ]; then
                echo "‚ùå No job files provided for batch analysis"
                exit 1
              fi
              # Check each job file
              IFS=',' read -ra FILES <<< "$JOB_FILES"
              for file in "${FILES[@]}"; do
                file=$(echo "$file" | xargs)  # trim whitespace
                if [ ! -f "$file" ]; then
                  echo "‚ùå Job file not found: $file"
                  exit 1
                fi
              done
              echo "‚úÖ All batch files validated"
              ;;
            
            "log_daily")
              HOURS="${{ github.event.inputs.hours }}"
              if ! [[ "$HOURS" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
                echo "‚ùå Invalid hours format: $HOURS"
                exit 1
              fi
              echo "‚úÖ Hours validated: $HOURS"
              ;;
            
            "end_sprint")
              TEST_SCORES="${{ github.event.inputs.test_scores }}"
              if [ -n "$TEST_SCORES" ] && [ "$TEST_SCORES" != "{}" ]; then
                echo "$TEST_SCORES" | python3 -m json.tool > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  echo "‚ùå Invalid JSON format in test_scores"
                  exit 1
                fi
              fi
              echo "‚úÖ Test scores validated"
              ;;
          esac
          
          echo "validation_passed=true" >> $GITHUB_OUTPUT
      
      # =====================================================================
      # INITIALIZE ENGINE
      # =====================================================================
      
      - name: üîß Initialize Engine
        id: init_engine
        run: |
          python << 'PYTHON_EOF'
          import os, sys
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              state = engine.state
              
              current_score = state.get('current_score', 0)
              baseline_score = state.get('baseline_score', 0)
              current_sprint = state.get('current_sprint', 0)
              mode = state.get('mode') or 'none'
              initialized = 'true' if (mode and mode != 'none') else 'false'
              
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"current_score={current_score}\n")
                  f.write(f"baseline_score={baseline_score}\n")
                  f.write(f"current_sprint={current_sprint}\n")
                  f.write(f"mode={mode}\n")
                  f.write(f"initialized={initialized}\n")
              
              print(f"‚úÖ Engine initialized")
              print(f"   Score: {current_score}% | Mode: {mode} | Initialized: {initialized}")
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # DAILY PROGRESS REPORT
      # =====================================================================
      
      - name: üìä Daily Progress Report
        if: |
          (github.event_name == 'schedule') || 
          (github.event.inputs.action == 'daily_report')
        run: |
          python << 'PYTHON_EOF'
          import os, sys
          from datetime import datetime
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if engine.state.get('mode') is None:
                  print("\n" + "="*80)
                  print("‚ö†Ô∏è  WORKFLOW NOT INITIALIZED")
                  print("="*80)
                  print("\nüìã To get started:")
                  print("   1. Go to Actions tab")
                  print("   2. Select this workflow")
                  print("   3. Click 'Run workflow'")
                  print("   4. Choose action: 'full_analysis'")
                  print("   5. Provide CV and job description paths")
                  print("\n" + "="*80)
                  exit(0)
              
              print("\n" + "="*80)
              print(f"üìä DAILY PROGRESS REPORT - {datetime.now().strftime('%Y-%m-%d %H:%M')}")
              print("="*80)
              
              engine.display_progress_dashboard()
              
              if engine.sprint_history:
                  last_sprint = engine.sprint_history[-1]
                  if isinstance(last_sprint, dict) and not last_sprint.get('completed', False):
                      days_logged = len(last_sprint.get('daily_logs', []))
                      print(f"\n‚è∞ SPRINT REMINDER:")
                      print(f"   Sprint {last_sprint['sprint_number']}: Day {days_logged}/14")
                      print(f"   Log today's progress!")
              
              print("\n" + "="*80)
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # FULL JOB ANALYSIS
      # =====================================================================
      
      - name: üéØ Full Job Analysis
        if: github.event.inputs.action == 'full_analysis'
        id: full_analysis
        run: |
          python << 'PYTHON_EOF'
          import os, sys
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              cv_path = "${{ github.event.inputs.cv_path }}"
              job_path = "${{ github.event.inputs.job_path }}"
              job_title = "${{ github.event.inputs.job_title }}"
              company = "${{ github.event.inputs.company_name }}"
              
              print("\n" + "="*80)
              print("üéØ FULL JOB ANALYSIS")
              print("="*80)
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              print(f"\nüìÑ Analyzing CV: {cv_path}")
              print(f"üìÑ Against Job: {job_path}")
              print(f"üè¢ Company: {company}")
              print(f"üíº Role: {job_title}")
              
              analysis = engine.analyze_from_files(
                  cv_file=cv_path,
                  job_file=job_path,
                  job_title=job_title,
                  company=company
              )
              
              score = analysis['score']['total_score']
              
              print("\nüìö Creating learning plan (REVERSE mode)...")
              learning_plan = engine.create_learning_plan(analysis, mode="reverse")
              
              print("üéØ Creating improvement strategy...")
              strategy = engine.create_improvement_strategy(analysis, learning_plan)
              
              print("üìù Generating skill tests...")
              missing_skills = analysis['gaps']['missing_required_skills'][:5]
              tests = engine.generate_skill_tests(missing_skills)
              
              # Generate materials if requested
              if "${{ github.event.inputs.generate_materials }}" == "true":
                  print("\n‚úâÔ∏è  Generating application materials...")
                  letters = engine.generate_recruiter_letter(analysis, learning_plan)
              
              # Update state
              engine.state['baseline_score'] = score
              engine.state['current_score'] = score
              engine.state['mode'] = 'reverse'
              engine.state['current_stage'] = 'baseline'
              engine._save_json(engine.state_file, engine.state)
              
              print("\n" + "="*80)
              print("‚úÖ ANALYSIS COMPLETE")
              print("="*80)
              print(f"\nüìä Match Score: {score}%")
              print(f"üìã Missing Skills: {len(analysis['gaps']['missing_required_skills'])}")
              print(f"‚è±Ô∏è  Timeline: {learning_plan['estimated_duration']}")
              print(f"\n‚úÖ All data saved to: {engine.data_dir}")
              print(f"\nüöÄ Next Step: Start your first sprint!")
              print("="*80)
              
              # Output for notifications
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"score={score}\n")
                  f.write(f"missing_skills={len(analysis['gaps']['missing_required_skills'])}\n")
                  f.write(f"timeline={learning_plan['estimated_duration']}\n")
              
          except FileNotFoundError as e:
              print(f"\n‚ùå File not found: {e}")
              exit(1)
          except Exception as e:
              print(f"\n‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # BATCH JOB ANALYSIS
      # =====================================================================
      
      - name: üìä Batch Job Analysis
        if: github.event.inputs.action == 'batch_analysis'
        id: batch_analysis
        run: |
          python << 'PYTHON_EOF'
          import os, sys, json
          from datetime import datetime
          from pathlib import Path
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              cv_file = "${{ github.event.inputs.cv_path }}"
              job_files_input = "${{ github.event.inputs.job_files }}"
              generate_comparison = "${{ github.event.inputs.generate_comparison }}" == "true"
              
              job_files = [f.strip() for f in job_files_input.split(',') if f.strip()]
              
              print("\n" + "="*80)
              print("üìä BATCH JOB ANALYSIS")
              print("="*80)
              print(f"\nüìÑ CV: {cv_file}")
              print(f"üéØ Jobs: {len(job_files)}")
              print(f"üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
              
              results = []
              
              for idx, job_file in enumerate(job_files, 1):
                  print(f"\n{'='*60}")
                  print(f"üìã Job {idx}/{len(job_files)}: {job_file}")
                  print(f"{'='*60}")
                  
                  try:
                      analysis = engine.analyze_from_files(
                          cv_file=cv_file,
                          job_file=job_file
                      )
                      
                      job_id = analysis['job_id']
                      score = analysis['score']['total_score']
                      
                      # Create job-specific directory
                      job_dir = f"batch_results/{job_id}"
                      os.makedirs(job_dir, exist_ok=True)
                      
                      # Save results
                      with open(f"{job_dir}/match_score.json", 'w') as f:
                          json.dump(analysis['score'], f, indent=2)
                      
                      with open(f"{job_dir}/gap_analysis.json", 'w') as f:
                          json.dump(analysis['gaps'], f, indent=2)
                      
                      # Generate learning plan
                      learning_plan = engine.create_learning_plan(analysis)
                      with open(f"{job_dir}/learning_plan.json", 'w') as f:
                          json.dump(learning_plan, f, indent=2)
                      
                      # Generate strategy
                      strategy = engine.create_improvement_strategy(analysis, learning_plan)
                      with open(f"{job_dir}/improvement_strategy.md", 'w') as f:
                          f.write(strategy)
                      
                      results.append({
                          'job_file': job_file,
                          'job_id': job_id,
                          'score': score,
                          'breakdown': analysis['score']['breakdown'],
                          'missing_skills': len(analysis['gaps']['missing_required_skills']),
                          'status': 'success'
                      })
                      
                      print(f"‚úÖ Score: {score}% - Saved to {job_dir}/")
                      
                  except Exception as e:
                      print(f"‚ùå Error: {str(e)}")
                      results.append({
                          'job_file': job_file,
                          'score': 0,
                          'status': 'error',
                          'error': str(e)
                      })
              
              # Generate comparison report
              if generate_comparison and len(results) > 1:
                  print("\nüìä Generating comparison report...")
                  
                  sorted_results = sorted(
                      [r for r in results if r['status'] == 'success'],
                      key=lambda x: x['score'],
                      reverse=True
                  )
                  
                  report = f"""# Batch Job Analysis Comparison Report

                  **Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                  **CV Analyzed:** {cv_file}
                  **Total Jobs:** {len(results)}

                  ---

                  ## Summary Ranking

                  """
                  
                  for rank, result in enumerate(sorted_results, 1):
                      emoji = "ü•á" if rank == 1 else "ü•à" if rank == 2 else "ü•â" if rank == 3 else f"{rank}."
                      status = "‚úÖ Apply Now" if result['score'] >= 75 else "‚ö†Ô∏è Improve First" if result['score'] >= 60 else "‚ùå Major Gaps"
                      
                      report += f"{emoji} **{result['job_id']}** - {result['score']}% - {status}\n"
                      report += f"   - File: `{result['job_file']}`\n"
                      report += f"   - Missing Skills: {result['missing_skills']}\n\n"
                  
                  report += "\n---\n\n## Detailed Comparison\n\n"
                  report += "| Rank | Job | Score | Required Skills | Experience | Keywords | Preferred | Education |\n"
                  report += "|------|-----|-------|-----------------|------------|----------|-----------|------------|\n"
                  
                  for rank, result in enumerate(sorted_results, 1):
                      breakdown = result['breakdown']
                      report += f"| {rank} | {result['job_id'][:20]} | **{result['score']}%** | "
                      report += f"{breakdown.get('required_skills', 0)}% | "
                      report += f"{breakdown.get('experience', 0)}% | "
                      report += f"{breakdown.get('keywords', 0)}% | "
                      report += f"{breakdown.get('preferred_skills', 0)}% | "
                      report += f"{breakdown.get('education', 0)}% |\n"
                  
                  report += "\n---\n\n## Recommendations\n\n"
                  
                  if sorted_results:
                      best = sorted_results[0]
                      report += f"### üéØ Best Match: {best['job_id']}\n"
                      report += f"**Score: {best['score']}%**\n\n"
                      
                      if best['score'] >= 75:
                          report += "‚úÖ **Action:** Apply immediately! You're a strong candidate.\n\n"
                      elif best['score'] >= 60:
                          report += "‚ö†Ô∏è **Action:** Improve for 4-8 weeks, then apply.\n\n"
                      else:
                          report += "‚ùå **Action:** Focus on skill development for 12+ weeks.\n\n"
                  
                  with open('batch_results/comparison_report.md', 'w') as f:
                      f.write(report)
                  
                  print("‚úÖ Comparison report generated!")
              
              # Save summary
              with open('batch_results/summary.json', 'w') as f:
                  json.dump(results, f, indent=2)
              
              # Set outputs
              successful = [r for r in results if r['status'] == 'success']
              if successful:
                  avg_score = sum(r['score'] for r in successful) / len(successful)
                  best_score = max(r['score'] for r in successful)
                  best_job = sorted_results[0]['job_id'] if sorted_results else 'N/A'
              else:
                  avg_score = 0
                  best_score = 0
                  best_job = 'N/A'
              
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"total_jobs={len(job_files)}\n")
                  f.write(f"successful={len(successful)}\n")
                  f.write(f"average_score={avg_score:.1f}\n")
                  f.write(f"best_score={best_score:.1f}\n")
                  f.write(f"best_job={best_job}\n")
              
              print(f"\n‚úÖ Batch analysis complete!")
              print(f"üìä Average Score: {avg_score:.1f}%")
              print(f"üèÜ Best Score: {best_score:.1f}%")
              print("="*80)
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # START SPRINT
      # =====================================================================
      
      - name: üèÉ Start Sprint
        if: github.event.inputs.action == 'start_sprint'
        run: |
          python << 'PYTHON_EOF'
          import sys
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if engine.state.get('mode') is None:
                  print("‚ùå Workflow not initialized. Run 'full_analysis' first.")
                  exit(1)
              
              if not engine.learning_progress:
                  print("‚ùå No learning plan found. Run 'full_analysis' first.")
                  exit(1)
              
              plan = engine.learning_progress[-1] if isinstance(engine.learning_progress, list) else engine.learning_progress
              
              skills_to_learn = []
              mastered_lower = [s.lower() for s in engine.state.get('skills_mastered', [])]
              
              for item in plan['levels']['study']:
                  if item['skill'].lower() not in mastered_lower:
                      skills_to_learn.append(item['skill'])
                      if len(skills_to_learn) >= 2:
                          break
              
              if not skills_to_learn:
                  for item in plan['levels']['practice']:
                      if item['skill'].lower() not in mastered_lower:
                          skills_to_learn.append(item['skill'])
                          if len(skills_to_learn) >= 2:
                              break
              
              if not skills_to_learn:
                  print("üéâ All planned skills mastered! Consider:")
                  print("   1. Re-analyze with updated CV")
                  print("   2. Add more advanced skills")
                  print("   3. Focus on positioning and branding")
                  exit(0)
              
              project_goal = f"Build project demonstrating {' and '.join(skills_to_learn)}"
              
              sprint = engine.start_sprint(skills_to_learn, project_goal)
              
              print("\nüìå To log daily progress:")
              print("   Run workflow with action: log_daily")
              print("   Provide hours, concepts, and notes")
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # LOG DAILY PROGRESS
      # =====================================================================
      
      - name: üìù Log Daily Progress
        if: github.event.inputs.action == 'log_daily'
        run: |
          python << 'PYTHON_EOF'
          import sys
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if not engine.sprint_history:
                  print("‚ùå No active sprint. Start a sprint first.")
                  exit(1)
              
              last_sprint = engine.sprint_history[-1]
              if not isinstance(last_sprint, dict) or last_sprint.get('completed', False):
                  print("‚ùå No active sprint. Current sprint is completed.")
                  exit(1)
              
              hours = float("${{ github.event.inputs.hours }}")
              concepts_str = "${{ github.event.inputs.concepts }}"
              concepts = [c.strip() for c in concepts_str.split(',') if c.strip()]
              notes = "${{ github.event.inputs.notes }}"
              
              if not concepts:
                  concepts = ["Daily learning progress"]
              
              engine.log_daily(hours, concepts, notes)
              
              print(f"\n‚úÖ Successfully logged {hours}h with {len(concepts)} concepts")
              
          except ValueError as e:
              print(f"‚ùå Invalid hours value: {e}")
              exit(1)
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # END SPRINT
      # =====================================================================
      
      - name: üèÅ End Sprint
        if: github.event.inputs.action == 'end_sprint'
        run: |
          python << 'PYTHON_EOF'
          import os, sys, json
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if not engine.sprint_history:
                  print("‚ùå No active sprint found.")
                  exit(1)
              
              current_sprint = engine.sprint_history[-1]
              
              if not isinstance(current_sprint, dict):
                  print("‚ùå Invalid sprint data.")
                  exit(1)
              
              if current_sprint.get('completed', False):
                  print("‚ùå Current sprint already completed.")
                  print("   Start a new sprint with 'start_sprint' action")
                  exit(1)
              
              print("\n" + "="*80)
              print(f"ENDING SPRINT {current_sprint['sprint_number']}")
              print("="*80)
              
              project_url = "${{ github.event.inputs.project_url }}"
              test_scores_str = "${{ github.event.inputs.test_scores }}"
              
              if not project_url:
                  project_url = "https://github.com/user/sprint-project"
                  print("‚ö†Ô∏è  Using default project URL")
              
              if test_scores_str and test_scores_str != '{}':
                  test_scores = json.loads(test_scores_str)
              else:
                  test_scores = {
                      skill: 70.0
                      for skill in current_sprint['skills_targeted']
                  }
                  print("‚ö†Ô∏è  Using default test scores (70%)")
              
              result = engine.end_sprint(project_url, test_scores)
              
              cv_path = "${{ github.event.inputs.cv_path }}"
              job_path = "${{ github.event.inputs.job_path }}"
              
              try:
                  print("\nüîÑ Re-analyzing job match...")
                  analysis = engine.analyze_from_files(cv_path, job_path)
                  new_score = analysis['score']['total_score']
                  old_score = engine.state.get('current_score', 0)
                  
                  engine.state['current_score'] = new_score
                  engine._save_json(engine.state_file, engine.state)
                  
                  print(f"\nüìä Score Update:")
                  print(f"   Previous: {old_score}%")
                  print(f"   Current:  {new_score}%")
                  print(f"   Change:   {new_score - old_score:+.1f}%")
              except Exception as e:
                  print(f"‚ö†Ô∏è  Could not re-analyze: {e}")
              
              print("\n" + "="*80)
              
          except json.JSONDecodeError as e:
              print(f"‚ùå Invalid JSON in test_scores: {e}")
              exit(1)
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # QUALITY GATE CHECK
      # =====================================================================
      
      - name: üö™ Check Quality Gates
        if: |
          (github.event_name == 'schedule') || 
          (github.event.inputs.action == 'quality_check')
        id: quality_gates
        run: |
          python << 'PYTHON_EOF'
          import os, sys
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if engine.state.get('mode') is None:
                  print("‚ö†Ô∏è  No workflow initialized")
                  exit(0)
              
              print("\n" + "="*80)
              print("QUALITY GATE ASSESSMENT")
              print("="*80)
              
              gates_status = engine.check_quality_gates()
              
              state = engine.state
              score = state.get('current_score', 0)
              projects = len(state.get('projects_completed', []))
              
              print(f"\nüìä Current Status:")
              print(f"   Match Score: {score}%")
              print(f"   Projects: {projects}")
              print(f"   Skills Mastered: {len(state.get('skills_mastered', []))}")
              
              print(f"\nüö™ Quality Gates:")
              for gate_name, passed in gates_status.items():
                  status = "‚úÖ" if passed else "‚è≥"
                  req = engine.QUALITY_GATES[gate_name]
                  print(f"   {status} {gate_name.upper()}")
                  if "score" in req:
                      print(f"      Score: {score}/{req['score']}%")
                  if "projects" in req:
                      print(f"      Projects: {projects}/{req['projects']}")
              
              if gates_status.get('application_ready', False):
                  print(f"\nüéâ CONGRATULATIONS!")
                  print(f"   You've passed all quality gates!")
                  print(f"   YOU ARE NOW APPLICATION-READY! üöÄ")
                  
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write("application_ready=true\n")
              else:
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write("application_ready=false\n")
              
              print("\n" + "="*80)
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # GENERATE APPLICATION MATERIALS
      # =====================================================================
      
      - name: ‚úâÔ∏è Generate Application Materials
        if: github.event.inputs.action == 'generate_materials'
        run: |
          python << 'PYTHON_EOF'
          import os, sys
          from pathlib import Path
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if engine.state.get('mode') is None:
                  print("‚ùå Workflow not initialized. Run 'full_analysis' first.")
                  exit(1)
              
              print("\n" + "="*80)
              print("‚úâÔ∏è  GENERATING APPLICATION MATERIALS")
              print("="*80)
              
              cv_path = "${{ github.event.inputs.cv_path }}"
              job_path = "${{ github.event.inputs.job_path }}"
              
              # Re-analyze to get latest data
              analysis = engine.analyze_from_files(cv_path, job_path)
              
              if engine.learning_progress:
                  learning_plan = engine.learning_progress[-1] if isinstance(engine.learning_progress, list) else engine.learning_progress
              else:
                  learning_plan = engine.create_learning_plan(analysis, mode="reverse")
              
              print("\nüìù Generating cover letter...")
              letters = engine.generate_recruiter_letter(analysis, learning_plan)
              
              print("\nüìÑ Generating tailored CV highlights...")
              # Create a highlights document
              highlights = f"""# CV Highlights for {analysis.get('company', 'Target Company')}

              ## Top Matching Skills
              """
              for skill in analysis['matching']['matched_skills'][:10]:
                  highlights += f"- ‚úÖ {skill}\n"
              
              highlights += f"\n## Key Achievements to Emphasize\n"
              highlights += "- [Add relevant achievements here based on job requirements]\n"
              
              highlights += f"\n## Address These in Interview\n"
              for skill in analysis['gaps']['missing_required_skills'][:5]:
                  highlights += f"- {skill}: [Prepare talking points]\n"
              
              output_dir = Path("output/application_materials")
              output_dir.mkdir(parents=True, exist_ok=True)
              
              (output_dir / "cv_highlights.md").write_text(highlights)
              
              print(f"\n‚úÖ Materials generated in: {output_dir}")
              print("   - Cover letters")
              print("   - CV highlights")
              print("   - Interview preparation notes")
              print("\n" + "="*80)
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # SPRINT RECOMMENDATIONS
      # =====================================================================
      
      - name: üí° Generate Sprint Recommendations
        if: steps.init_engine.outputs.initialized == 'true'
        run: |
          python << 'PYTHON_EOF'
          import os, sys
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if not engine.sprint_history:
                  print("\nüí° No sprints completed yet.")
                  print("   Start your first sprint to begin tracking!")
                  exit(0)
              
              completed_sprints = [
                  s for s in engine.sprint_history 
                  if isinstance(s, dict) and s.get('completed')
              ]
              
              if not completed_sprints:
                  print("\n‚è≥ Sprint in progress...")
                  current = engine.sprint_history[-1]
                  if isinstance(current, dict):
                      days_logged = len(current.get('daily_logs', []))
                      print(f"   Sprint {current.get('sprint_number', '?')}: Day {days_logged}/14")
                  exit(0)
              
              last_sprint = completed_sprints[-1]
              
              print("\n" + "="*80)
              print("SPRINT RECOMMENDATIONS")
              print("="*80)
              
              total_hours = last_sprint.get('total_hours', 0)
              
              print(f"\nüìä Last Sprint Performance:")
              print(f"   Total Hours: {total_hours:.1f}h")
              
              state = engine.state
              current_score = state.get('current_score', 0)
              
              print(f"\nüí° Recommendations:")
              
              if current_score < 65:
                  print(f"\nüéØ Next Sprint Focus: FOUNDATION")
                  print(f"   ‚Ä¢ Core Tier 1 skills")
                  print(f"   ‚Ä¢ Basic projects")
                  print(f"   ‚Ä¢ Beginner tests")
              elif current_score < 80:
                  print(f"\nüéØ Next Sprint Focus: SKILL BUILDING")
                  print(f"   ‚Ä¢ Intermediate topics")
                  print(f"   ‚Ä¢ Medium complexity projects")
                  print(f"   ‚Ä¢ Intermediate tests")
              elif current_score < 90:
                  print(f"\nüéØ Next Sprint Focus: MASTERY")
                  print(f"   ‚Ä¢ Advanced concepts")
                  print(f"   ‚Ä¢ Production-grade projects")
                  print(f"   ‚Ä¢ Advanced tests")
              else:
                  print(f"\nüéØ Next Focus: POSITIONING")
                  print(f"   ‚Ä¢ Professional branding")
                  print(f"   ‚Ä¢ Network building")
                  print(f"   ‚Ä¢ Application preparation")
              
              print("\n" + "="*80)
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # MILESTONE NOTIFICATIONS
      # =====================================================================
      
      - name: üéâ Check for Milestones
        if: steps.init_engine.outputs.initialized == 'true'
        run: |
          python << 'PYTHON_EOF'
          import os, sys
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              state = engine.state
              
              score = state.get('current_score', 0)
              baseline = state.get('baseline_score', 0)
              gates = state.get('quality_gates_passed', [])
              
              milestones = []
              
              if score >= 50 and baseline < 50:
                  milestones.append("üéØ Reached 50% Match Score!")
              if score >= 65 and 'foundation' in gates:
                  milestones.append("üèÜ FOUNDATION GATE PASSED!")
              if score >= 75 and baseline < 75:
                  milestones.append("üéØ Reached 75% Match Score!")
              if score >= 80 and 'competency' in gates:
                  milestones.append("üèÜ COMPETENCY GATE PASSED!")
              if score >= 90 and 'mastery' in gates:
                  milestones.append("üèÜ MASTERY GATE PASSED!")
              
              sprint_count = len([
                  s for s in engine.sprint_history 
                  if isinstance(s, dict) and s.get('completed')
              ])
              if sprint_count == 1:
                  milestones.append("üéä First Sprint Complete!")
              elif sprint_count == 5:
                  milestones.append("üéä Five Sprints Complete!")
              elif sprint_count == 10:
                  milestones.append("üéä Ten Sprints Complete - You're Dedicated!")
              
              skills_count = len(state.get('skills_mastered', []))
              if skills_count == 1:
                  milestones.append("‚ú® First Skill Mastered!")
              elif skills_count == 5:
                  milestones.append("‚ú® Five Skills Mastered!")
              elif skills_count == 10:
                  milestones.append("‚ú® Ten Skills Mastered - Impressive!")
              
              projects = len(state.get('projects_completed', []))
              if projects == 1:
                  milestones.append("üöÄ First Project Complete!")
              elif projects == 5:
                  milestones.append("üöÄ Five Projects Complete!")
              
              if state.get('application_ready', False):
                  milestones.append("üéâ APPLICATION READY - TIME TO APPLY!")
              
              if milestones:
                  print("\n" + "="*80)
                  print("üéâ MILESTONES ACHIEVED!")
                  print("="*80)
                  for milestone in milestones:
                      print(f"\n   {milestone}")
                  print("\n" + "="*80)
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          PYTHON_EOF
      
      # =====================================================================
      # GENERATE COMPREHENSIVE SUMMARY REPORT
      # =====================================================================
      
      - name: üìÑ Generate Comprehensive Summary Report
        if: always()
        run: |
          python << 'PYTHON_EOF'
          import os, sys
          from datetime import datetime
          from pathlib import Path
          
          try:
              sys.path.insert(0, 'src')
              from python_advanced_job_engine import AdvancedJobEngine
              
              engine = AdvancedJobEngine(data_dir="${{ env.DATA_DIR }}")
              
              if engine.state.get('mode') is None:
                  report_content = f"""# Ultimate Job Search Progress

                  **Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                  **Status:** Not Initialized

                  ---

                  ## üöÄ Getting Started

                  To initialize your job search workflow:

                    1. Go to the **Actions** tab
                    2. Select **Ultimate Job Search Engine**
                    3. Click **Run workflow**
                    4. Choose action: **full_analysis**
                    5. Provide paths to your CV and target job description

                  ---

                  *Generated by Ultimate Job Search Engine*
                  """
                  Path("PROGRESS_REPORT.md").write_text(report_content)
                  print("\nüìã Workflow not initialized yet")
                  exit(0)
              
              state = engine.state
              score = state.get('current_score', 0)
              baseline = state.get('baseline_score', 0)
              improvement = score - baseline
              
              report_content = f"""# Ultimate Job Search Progress Report

              **Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
              **Mode:** {state.get('mode', 'N/A').upper()}  
              **Action Performed:** ${{ github.event.inputs.action || 'scheduled' }}

              ---

              ## üìä Match Score Progress

              | Metric | Value |
              |--------|-------|
              | Baseline Score | {baseline}% |
              | Current Score | {score}% |
              | Improvement | +{improvement}% |
              | Target Score | {state.get('target_score', 90)}% |
              | Remaining | {state.get('target_score', 90) - score}% |

              {"üéâ **TARGET ACHIEVED!**" if score >= state.get('target_score', 90) else ""}

              ---

              ## üéØ Skills Mastered ({len(state.get('skills_mastered', []))})
              
              """
              
              if state.get('skills_mastered'):
                  for skill in state.get('skills_mastered', []):
                      report_content += f"- ‚úÖ {skill}\n"
              else:
                  report_content += "- No skills mastered yet - start your first sprint!\n"
              
              report_content += f"""

              ---

              ## üóÇÔ∏è Projects Completed ({len(state.get('projects_completed', []))})

              """
              
              if state.get('projects_completed'):
                  for i, proj in enumerate(state.get('projects_completed', []), 1):
                      report_content += f"{i}. **{proj.get('goal', 'N/A')}**\n"
                      report_content += f"   - Skills: {', '.join(proj.get('skills', []))}\n"
                      report_content += f"   - URL: {proj.get('url', 'N/A')}\n\n"
              else:
                  report_content += "- No projects completed yet\n"
              
              report_content += f"""

              ---

              ## üö™ Quality Gates

              | Gate | Status | Required |
              |------|--------|----------|
              | Foundation | {'‚úÖ Passed' if 'foundation' in state.get('quality_gates_passed', []) else '‚è≥ Pending'} | 65% score, 2 projects |
              | Competency | {'‚úÖ Passed' if 'competency' in state.get('quality_gates_passed', []) else '‚è≥ Pending'} | 80% score, 4 projects |
              | Mastery | {'‚úÖ Passed' if 'mastery' in state.get('quality_gates_passed', []) else '‚è≥ Pending'} | 90% score, 5 projects |
              | Application Ready | {'‚úÖ Passed' if state.get('application_ready') else '‚è≥ Pending'} | All gates + branding |

              ---

              ## üìà Sprint Progress

              - **Total Sprints:** {state.get('current_sprint', 0)}
              - **Completed Sprints:** {len([s for s in engine.sprint_history if isinstance(s, dict) and s.get('completed')])}
              - **Current Stage:** {state.get('current_stage', 'baseline').replace('_', ' ').title()}
              - **Started:** {state.get('started_date', 'N/A')[:10] if state.get('started_date') else 'N/A'}

              ---

              ## üéØ Current Status & Focus

              """
              
              if score < 65:
                  report_content += """**Phase:** Foundation Building  
              **Priority:** High  

              ### Actions Required:
              1. ‚úÖ Master Tier 1 critical skills
              2. ‚úÖ Build 2 foundational projects
              3. ‚úÖ Pass beginner-level tests
              4. ‚úÖ Log daily progress consistently

              ### Estimated Time: 8-12 weeks
              """
              elif score < 80:
                  report_content += """**Phase:** Skill Development  
              **Priority:** Medium  

              ### Actions Required:
              1. ‚úÖ Deepen intermediate skills
              2. ‚úÖ Build 2-3 complex projects
              3. ‚úÖ Pass intermediate tests
              4. ‚úÖ Contribute to open source

              ### Estimated Time: 6-10 weeks
              """
              elif score < 90:
                  report_content += """**Phase:** Advanced Mastery  
              **Priority:** Medium  

              ### Actions Required:
              1. ‚úÖ Master advanced concepts
              2. ‚úÖ Build 2 production-grade projects
              3. ‚úÖ Pass advanced tests
              4. ‚úÖ Start networking

              ### Estimated Time: 4-8 weeks
              """
              else:
                  report_content += """**Phase:** Application Preparation  
              **Priority:** High - Ready to Apply!  

              ### Actions Required:
              1. ‚úÖ Polish LinkedIn profile
              2. ‚úÖ Build professional brand
              3. ‚úÖ Network actively
              4. ‚úÖ **START APPLYING! üöÄ**

              ### You're Ready Now!
              """
              
              report_content += f"""

              ---

              ## üìù Tests Passed

              """
              
              tests_passed = state.get('tests_passed', {})
              if tests_passed:
                  for skill, levels in tests_passed.items():
                      report_content += f"- **{skill}**: {', '.join(levels)}\n"
              else:
                  report_content += "- No tests passed yet\n"
              
              report_content += f"""

              ---

              ## üéØ Readiness Indicators

              | Indicator | Status | Progress |
              |-----------|--------|----------|
              | Brand Ready | {'‚úÖ Complete' if state.get('brand_ready') else '‚è≥ In Progress'} | LinkedIn, Portfolio, GitHub |
              | Network Ready | {'‚úÖ Complete' if state.get('network_ready') else '‚è≥ In Progress'} | Industry Connections |
              | Application Ready | {'‚úÖ Complete' if state.get('application_ready') else '‚è≥ In Progress'} | All Gates Passed |

              ---

              ## üìä Recent Sprint Activity

              """
              
              if engine.sprint_history:
                  completed = [
                      s for s in engine.sprint_history 
                      if isinstance(s, dict) and s.get('completed')
                  ]
                  
                  if completed:
                      for sprint in completed[-3:]:
                          report_content += f"""
              ### Sprint {sprint.get('sprint_number', '?')}
              - **Goal:** {sprint.get('project_goal', 'N/A')}
              - **Skills:** {', '.join(sprint.get('skills_targeted', []))}
              - **Hours:** {sprint.get('total_hours', 0):.1f}h
              - **Completed:** {sprint.get('completion_date', 'N/A')[:10]}
              """
                  else:
                      report_content += "\n*No completed sprints yet - start your first sprint!*\n"
              else:
                  report_content += "\n*No sprint history available*\n"
              
              report_content += """

              ---

              ## üí° Recommended Next Actions

              """
              
              # Get next actions based on current state
              if not engine.sprint_history or all(isinstance(s, dict) and s.get('completed') for s in engine.sprint_history):
                  report_content += """
              1. **Start New Sprint** - Run workflow with action: `start_sprint`
              2. **Choose 2 skills** from your learning plan
              3. **Define project goal** to demonstrate those skills
              4. **Commit to 14 days** of consistent learning
              """
              elif engine.sprint_history:
                  current = engine.sprint_history[-1]
                  if isinstance(current, dict) and not current.get('completed'):
                      days_logged = len(current.get('daily_logs', []))
                      report_content += f"""
              **Current Sprint in Progress:** Sprint {current.get('sprint_number', '?')}

              1. **Log Today's Progress** - Run workflow with action: `log_daily`
              - Days logged: {days_logged}/14
                - Hours, concepts, and notes
                2. **Stay Consistent** - Daily practice is key
                3. **Build Project** - Work towards sprint goal
                4. **End Sprint** - When complete (14 days or project done)
                """
              
              if score >= 75:
                  report_content += """

              ### üéØ Application Strategy
              - **Priority:** Start applying to jobs now!
              - **Target:** Companies matching your current skill level
              - **Approach:** Highlight completed projects and skills mastered
              - **Timeline:** Apply to 5-10 positions per week
              """
              
              report_content += f"""

---

## üìà Progress Visualization

```
Match Score Journey:
{baseline}% (Baseline) ‚Üí {score}% (Current) ‚Üí {state.get('target_score', 90)}% (Target)

[{"‚ñà" * int(score/5)}{"‚ñë" * (20-int(score/5))}] {score}%
```

---

## üîî Notifications & Alerts

"""
              
              if score - baseline >= 10:
                  report_content += "- üéâ **Major Progress!** +10% score improvement!\n"
              
              if len(state.get('quality_gates_passed', [])) >= 3:
                  report_content += "- üèÜ **3 Quality Gates Passed!** Almost there!\n"
              
              if state.get('application_ready'):
                  report_content += "- üöÄ **APPLICATION READY!** Time to start applying!\n"
              
              active_sprint = None
              if engine.sprint_history:
                  last = engine.sprint_history[-1]
                  if isinstance(last, dict) and not last.get('completed'):
                      active_sprint = last
              
              if active_sprint:
                  days = len(active_sprint.get('daily_logs', []))
                  if days >= 14:
                      report_content += "- ‚è∞ **Sprint Ready to End!** Complete and close your sprint.\n"
                  elif days >= 7:
                      report_content += "- üí™ **Halfway Through Sprint!** Keep up the momentum!\n"
              
              report_content += """

---

## üìû Support & Resources

- **Documentation:** Check workflow inputs for all available actions
- **Artifacts:** Download detailed reports from each run
- **Schedule:** Automated reports at 9 AM and 9 PM daily
- **Manual Runs:** Trigger anytime from Actions tab

---

*Generated by Ultimate Job Search Engine - Your Path to the Perfect Job*  
*Next automated run: Check schedule for 9 AM or 9 PM*
"""
              
              # Save report
              Path("PROGRESS_REPORT.md").write_text(report_content)
              
              print("\n‚úÖ Comprehensive report generated: PROGRESS_REPORT.md")
              print(f"   Current Score: {score}%")
              print(f"   Improvement: +{improvement}%")
              print(f"   Skills Mastered: {len(state.get('skills_mastered', []))}")
              print(f"   Projects: {len(state.get('projects_completed', []))}")
              
          except Exception as e:
              print(f"‚ùå Error: {e}")
              import traceback
              traceback.print_exc()
          PYTHON_EOF
      
      # =====================================================================
      # SAVE STATE FOR NEXT RUN
      # =====================================================================
      
      - name: üíæ Save State to Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.STATE_ARTIFACT }}
          path: ${{ env.DATA_DIR }}/
          retention-days: 90
          overwrite: true
      
      # =====================================================================
      # UPLOAD ALL ARTIFACTS
      # =====================================================================
      
      - name: üì§ Upload Progress Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: progress-report-${{ github.run_number }}
          path: PROGRESS_REPORT.md
          retention-days: 90
          if-no-files-found: warn
      
      - name: üì§ Upload Output Files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: job-analysis-output-${{ github.run_number }}
          path: |
            output/
            batch_results/
          retention-days: 90
          if-no-files-found: ignore
      
      # =====================================================================
      # EMAIL NOTIFICATIONS (Optional)
      # =====================================================================
      
      - name: üìß Send Email Notification
        if: |
          (github.event.inputs.send_email == 'true') && 
          (github.event.inputs.email_to != '')
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: |
            Job Search Update - Score: ${{ steps.init_engine.outputs.current_score }}%
          to: ${{ github.event.inputs.email_to }}
          from: Job Search Engine
          body: |
            Job Search Progress Update
            
            Action: ${{ github.event.inputs.action }}
            Current Score: ${{ steps.init_engine.outputs.current_score }}%
            Baseline Score: ${{ steps.init_engine.outputs.baseline_score }}%
            
            Check the full report in the Actions artifacts.
          
          attachments: PROGRESS_REPORT.md
        continue-on-error: true
      
      # =====================================================================
      # APPLICATION READY NOTIFICATION
      # =====================================================================
      
      - name: üéâ Application Ready Alert
        if: steps.quality_gates.outputs.application_ready == 'true'
        run: |
          echo ""
          echo "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì"
          echo "‚îÉ   üéâüéâüéâ CONGRATULATIONS! YOU'RE APPLICATION READY! üéâüéâüéâ      ‚îÉ"
          echo "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
          echo ""
          echo "‚úÖ All quality gates passed"
          echo "‚úÖ Match score target achieved"
          echo "‚úÖ Skills mastered and validated"
          echo "‚úÖ Projects completed"
          echo ""
          echo "üöÄ IMMEDIATE NEXT STEPS:"
          echo "   1. Update your CV with new skills and projects"
          echo "   2. Polish your LinkedIn profile"
          echo "   3. Prepare application materials (use 'generate_materials' action)"
          echo "   4. START APPLYING TO JOBS TODAY!"
          echo ""
          echo "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
      
      # =====================================================================
      # FINAL STATUS SUMMARY
      # =====================================================================
      
      - name: üìã Final Status & Summary
        if: always()
        run: |
          echo ""
          echo "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì"
          echo "‚îÉ              ‚úÖ Ultimate Job Search Engine Complete              ‚îÉ"
          echo "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
          echo ""
          echo "üìä Run Details:"
          echo "   ‚Ä¢ Action: ${{ github.event.inputs.action || 'scheduled' }}"
          echo "   ‚Ä¢ Workflow: ${{ github.workflow }}"
          echo "   ‚Ä¢ Run Number: ${{ github.run_number }}"
          echo "   ‚Ä¢ Run ID: ${{ github.run_id }}"
